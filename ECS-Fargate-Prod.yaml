AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation template for ecs cluster with fargate'

Parameters:

  ImageId:
    Type: String
    Description: The ID of the container image to use

  ClusterName:
    Type: String 
    Description: Name for Cluster. 
    Default: ECSProd

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 192.168.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 192.168.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 192.168.11.0/24

  PerformanceMode:
    Type: String
    AllowedValues: [ generalPurpose, maxIO ]
    Default: generalPurpose

  EfsProvisionedThroughputInMibps:
    Type: Number
    MinValue: 0
    MaxValue: 1024
    Default: 0

  ThroughputMode:
    Type: String
    AllowedValues: [ bursting, provisioned ]
    Default: bursting

Rules:
  ProvisionedThroughput:
    RuleCondition: !Equals [ !Ref ThroughputMode, provisioned ]
    Assertions:
      - Assert: !Not [ !Equals [ '0', !Ref EfsProvisionedThroughputInMibps ] ]
        AssertDescription: "EfsProvisionedThroughputInMibps must be greater than 0 when ThroughputMode is provisioned"
  BurstingThroughput:
    RuleCondition: !Equals [ !Ref ThroughputMode, bursting ]
    Assertions:
      - Assert:  !Equals [ '0', !Ref EfsProvisionedThroughputInMibps ]
        AssertDescription: "EfsProvisionedThroughputInMibps must be 0 when ThroughputMode is bursting"

Conditions:
  IsProvisioned:
    !Equals [ !Ref ThroughputMode, provisioned ]



Resources:
  VPCProd:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      
  InternetGatewayProd:
    Type: AWS::EC2::InternetGateway
  
    
  InternetGatewayAttachmentProd:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayProd
      VpcId: !Ref VPCProd

  PublicSubnet1Prod:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCProd
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false

  PublicSubnet2Prod:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCProd
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: false

  PublicRouteTableProd:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCProd

  DefaultPublicRouteProd:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachmentProd
    Properties:
      RouteTableId: !Ref PublicRouteTableProd
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayProd
      

  PublicSubnet1RouteTableAssociationProd:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableProd
      SubnetId: !Ref PublicSubnet1Prod

  PublicSubnet2RouteTableAssociationProd:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableProd
      SubnetId: !Ref PublicSubnet2Prod

  EFSSecurityGroupProd:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable EFS access via port 2049"
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          Description: "For enabling EFS access"
      SecurityGroupEgress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          Description: "For enabling EFS access"
      VpcId: !Ref VPCProd

  EFSFileSystemProd:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: !Ref PerformanceMode
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - elasticfilesystem:ClientMount
              - elasticfilesystem:ClientRootAccess
              - elasticfilesystem:ClientWrite
            Principal:
                AWS: !GetAtt ECSTaskRole.Arn
      ProvisionedThroughputInMibps: !If [ IsProvisioned, !Ref EfsProvisionedThroughputInMibps, !Ref 'AWS::NoValue' ]
      ThroughputMode: !Ref ThroughputMode
      FileSystemTags:
        - Key: Name
          Value: !Ref ClusterName

  MountTargetPublicSubnet1Prod:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystemProd
      SecurityGroups: [ !Ref EFSSecurityGroupProd ]
      SubnetId: !Ref PublicSubnet1Prod
  
  MountTargetPublicSubnet2Prod:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystemProd
      SecurityGroups: [ !Ref EFSSecurityGroupProd ]
      SubnetId: !Ref PublicSubnet2Prod

  AccessPointSitesProd:
      Type: 'AWS::EFS::AccessPoint'
      Properties:
        AccessPointTags: 
          - Key: "Name"
            Value: "sites"
        FileSystemId: !Ref EFSFileSystemProd
        PosixUser:
          Uid: "33"
          Gid: "33"
        RootDirectory:
          CreationInfo:
            OwnerGid: "33"
            OwnerUid: "33"
            Permissions: "0755"
          Path: "/sites"  

  clusterProd:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref ClusterName, Cluster]] 
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                 - elasticfilesystem:ClientMount
                 - elasticfilesystem:ClientRootAccess                 
                 - elasticfilesystem:ClientWrite
                Resource: '*'
                Condition:
                  StringEquals:
                    'aws:TagKeys/Name': !Ref ClusterName

  AutoScalingRoleProd:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  AutoScalingTargetProd:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: serviceProd
    Properties:
      MinCapacity: 2
      MaxCapacity: 4
      ResourceId: !Join ['/', [service, !Ref clusterProd, !GetAtt serviceProd.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRoleProd.Arn

  AutoScalingPolicyProd:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ClusterName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetProd
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 75

  serviceProd:
    Type: AWS::ECS::Service
    DependsOn: 
    - listenerProd
    Properties:
      ServiceName: !Join ['-',[!Ref ClusterName, service]]
      Cluster: !Ref clusterProd
      TaskDefinition: !Ref taskdefinitionProd
      EnableExecuteCommand: true
      DeploymentConfiguration:
          MinimumHealthyPercent: 100
          MaximumPercent: 200
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1Prod
            - !Ref PublicSubnet2Prod
          SecurityGroups:
            - !Ref containersecuritygroupProd
      LoadBalancers:
        - ContainerName: "bucketlist"
          ContainerPort: 80
          TargetGroupArn: !Ref targetgroupProd
  
  targetgroupProd:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: loadbalancerProd
    Properties:
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: "true"
      - Key: stickiness.type
        Value: lb_cookie 
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200,302"
      Name: !Join ['-', [!Ref ClusterName, TargetGroup]]
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPCProd

  listenerProd:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref targetgroupProd
          Type: forward
      LoadBalancerArn: !Ref loadbalancerProd
      Port: 80
      Protocol: HTTP

  loadbalancerProd:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:      
      Scheme: internet-facing
      SecurityGroups:
        - !Ref albsecuritygroupProd
      Subnets:
        - !Ref PublicSubnet1Prod
        - !Ref PublicSubnet2Prod
      

  containersecuritygroupProd:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref ClusterName, ContainerSecurityGroup]]
      VpcId: !Ref VPCProd
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref albsecuritygroupProd
          Description: "Container security group Ingress rule"
    
  albsecuritygroupProd:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref ClusterName, LoadBalancerSecurityGroup]]
      VpcId: !Ref VPCProd
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "ALB security group Ingress rule"
     
  LogGroupProd:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ClusterName, taskdefinition]]
      RetentionInDays: 30

  taskdefinitionProd: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Join ["-",[!Ref ClusterName,td]]
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        -
          
          Image: !Ref ImageId
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupProd
              awslogs-stream-prefix: ecs
          MountPoints:
            - 
              ContainerPath: "/mnt"
              SourceVolume: "sites"
          Name: "bucketlist"
          PortMappings:
            -
              ContainerPort: 80
              HostPort: 80
              Protocol: tcp

      Cpu: "4096"
      Memory: "8192"
      NetworkMode: awsvpc
      Volumes:
        - 
          Name: sites
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystemProd
            AuthorizationConfig:
              IAM: ENABLED
              AccessPointId: !Ref AccessPointSitesProd
            TransitEncryption: ENABLED
            RootDirectory: "/"
                
  ECSAlarmProd:
    Type: 'AWS::CloudWatch::Alarm'
    DependsOn:
         - SnsTopicProd
    Properties:
      AlarmName: !Sub ${AWS::StackName}-ECSAlarmProd
      AlarmDescription: ECS Alarm
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref clusterProd
        - Name: ServiceName
          Value: !Ref serviceProd
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SnsTopicProd
      TreatMissingData: notBreaching

  SnsTopicProd:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: SNS      
      Subscription:
        - Endpoint: sairamgs22@gmail.com
          Protocol: email  

    

  


Outputs:
  ALBEndpointProd:
    Description: "ALB endpoint"
    Value: 
      !GetAtt loadbalancerProd.DNSName
  